
import java.util.*;

public class CostosMinimos {
    static class Arista implements Comparable<Arista> {
        int u, v, w;
        Arista(int u, int v, int w) { this.u = u; this.v = v; this.w = w; }
        public int compareTo(Arista a) { return Integer.compare(this.w, a.w); }
    }

    public static void main(String[] args) {
        int[][] grafo = generarGrafo(10, 15);
        System.out.println("Costo Prim: " + prim(grafo));
        System.out.println("Costo Kruskal: " + kruskal(grafo));
    }

    static int[][] generarGrafo(int n, int minAristas) {
        int[][] g = new int[n][n];
        Random r = new Random();
        int aristas = 0;
        while (aristas < minAristas) {
            int u = r.nextInt(n), v = r.nextInt(n), w = r.nextInt(20) + 1;
            if (u != v && g[u][v] == 0) {
                g[u][v] = g[v][u] = w;
                aristas++;
            }
        }
        return g;
    }

    static int prim(int[][] g) {
        int n = g.length, costo = 0;
        boolean[] vis = new boolean[n];
        int[] min = new int[n];
        Arrays.fill(min, Integer.MAX_VALUE);
        min[0] = 0;
        
        for (int i = 0; i < n; i++) {
            int u = -1;
            for (int j = 0; j < n; j++)
                if (!vis[j] && (u == -1 || min[j] < min[u])) u = j;
            vis[u] = true;
            costo += min[u];
            for (int v = 0; v < n; v++)
                if (g[u][v] > 0 && !vis[v] && g[u][v] < min[v]) min[v] = g[u][v];
        }
        return costo;
    }

    static int kruskal(int[][] g) {
        int n = g.length;
        List<Arista> aristas = new ArrayList<>();
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j < n; j++)
                if (g[i][j] > 0) aristas.add(new Arista(i, j, g[i][j]));
        Collections.sort(aristas);
        
        int[] p = new int[n];
        for (int i = 0; i < n; i++) p[i] = i;
        
        int costo = 0, sel = 0;
        for (Arista a : aristas) {
            int ru = find(p, a.u), rv = find(p, a.v);
            if (ru != rv) {
                p[ru] = rv;
                costo += a.w;
                if (++sel == n - 1) break;
            }
        }
        return costo;
    }

    static int find(int[] p, int x) {
        return p[x] == x ? x : (p[x] = find(p, p[x]));
    }
}
